---
export interface Props {
  suburbName: string;
  suburbInfo: {
    slug: string;
    state: string;
    region: string;
  };
  title: string;
  description: string;
}

const { suburbName, suburbInfo, title, description } = Astro.props;
---

<!-- Leaflet CSS and JS for OpenStreetMap -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

<!-- Service Coverage Map -->
<section class="coverage-map-section" id="coverage-area">
  <div class="coverage-container">
    <div class="coverage-header">
      <h2>We Serve {suburbName} and Surrounding Areas</h2>
      <p>Our qualified care professionals provide services throughout {suburbInfo.region} with local teams based in your area.</p>
    </div>
    
    <div class="coverage-content">
      <div class="coverage-map">
        <div class="map-container" id="service-coverage-map">
          <!-- OpenStreetMap will be rendered here -->
          <div id="leaflet-map"></div>
          <div class="map-overlay">
            <div class="coverage-indicator">
              <span class="coverage-badge">✓ Full Service Coverage</span>
            </div>
          </div>
        </div>
      </div>
      
      <div class="coverage-details">
        <div class="coverage-info">
          <h3>{title}</h3>
          <p>{description}</p>
        </div>
        
        <div class="coverage-cta">
          <a href="/contact" class="cta-primary pulse-animation">
            <div class="cta-text">
              <span class="desktop-text">Contact Us</span>
              <span class="mobile-text">Contact</span>
            </div>
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ suburbName, suburbInfo }}>
// Track if map is already initialized
let mapInitialized = false;

// Initialize OpenStreetMap with Leaflet
const initializeMap = async () => {
  // Prevent multiple initializations
  if (mapInitialized) {
    console.log('Map already initialized, skipping...');
    return;
  }

  if (typeof L !== 'undefined') {
    const mapContainer = document.getElementById('leaflet-map');
    if (mapContainer && !mapContainer._leaflet_id) {
      
      // Mark as initializing to prevent concurrent calls
      mapInitialized = true;
      
      // Default coordinates (Sydney CBD)
      let coordinates = [-33.8688, 151.2093];
      
      try {
        // Use OpenStreetMap Nominatim to geocode the suburb
        const searchQuery = `${suburbName}, ${suburbInfo.state}, Australia`;
        console.log(`Searching for coordinates: ${searchQuery}`);
        
        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=au&addressdetails=1`, {
          method: 'GET',
          headers: {
            'User-Agent': 'MDHomeCare/1.0 (contact@mdhomecare.com.au)'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          
          if (data && data.length > 0) {
            coordinates = [parseFloat(data[0].lat), parseFloat(data[0].lon)];
            console.log(`Found coordinates for ${suburbName}: [${coordinates[0]}, ${coordinates[1]}]`);
          } else {
            console.warn(`No results found for ${suburbName}, using Sydney CBD as fallback`);
          }
        } else {
          console.warn(`Geocoding API responded with status: ${response.status}`);
        }
      } catch (geocodingError) {
        console.warn('Geocoding failed, using Sydney CBD as fallback:', geocodingError);
      }

      try {
        // Initialize the map with coordinates (either geocoded or fallback)
        const map = L.map('leaflet-map', {
          center: coordinates,
          zoom: 12,
          zoomControl: false,
          scrollWheelZoom: false,
          doubleClickZoom: true,
          dragging: true,
          touchZoom: true
        });

        // Add Carto Light tile layer
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
          attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>',
          subdomains: 'abcd',
          maxZoom: 20,
        }).addTo(map);

        // Add a circle to show service area
        L.circle(coordinates, {
          color: 'var(--primary-color, #007bff)',
          fillColor: 'var(--primary-color, #007bff)',
          fillOpacity: 0.1,
          radius: 5000, // 5km radius
          weight: 2
        }).addTo(map);

        // Add zoom control in bottom right
        L.control.zoom({ position: 'bottomright' }).addTo(map);

        // Invalidate size after a short delay to ensure proper rendering
        setTimeout(() => {
          map.invalidateSize();
        }, 100);

        console.log('Map initialized successfully');

      } catch (mapError) {
        console.error('Error initializing map:', mapError);
        mapInitialized = false; // Reset flag if initialization failed
        // Fallback: show a static image or message
        mapContainer.innerHTML = `
          <div style="
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            background: #f8f9fa;
            border-radius: 1rem;
            color: #6c757d;
            text-align: center;
            padding: 2rem;
          ">
            <div>
              <h3>${suburbName}</h3>
              <p>Service area map</p>
              <p style="font-size: 0.9em;">Interactive map temporarily unavailable</p>
            </div>
          </div>
        `;
      }
    } else if (mapContainer && mapContainer._leaflet_id) {
      console.log('Map container already has Leaflet instance');
    }
  } else {
    console.warn('Leaflet library not loaded, retrying...');
    // Reset flag to allow retry when Leaflet loads
    mapInitialized = false;
  }
};

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  // Try to initialize map when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeMap);
  } else {
    initializeMap();
  }

  // Single retry after a delay only if not already initialized
  setTimeout(() => {
    if (!mapInitialized && typeof L !== 'undefined') {
      initializeMap();
    }
  }, 1000);

  // Also try after a short delay to ensure Leaflet is loaded
  setTimeout(initializeMap, 500);

  // Add intersection observer for coverage section animation
  const coverageSection = document.querySelector('.coverage-map-section');
  if (coverageSection && 'IntersectionObserver' in window) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, {
      threshold: 0.2
    });

    observer.observe(coverageSection);
  }
});
</script>

<style>
  /* Coverage Map Section */
  .coverage-map-section {
    background: linear-gradient(135deg, #f8fafe 0%, #f1f7fd 100%);
    padding: 5rem 0;
    margin: 0 -50vw;
    width: 100vw;
    left: 50%;
    position: relative;
    border-top: 1px solid #e8f2ff;
    border-bottom: 1px solid #e8f2ff;
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s ease;
  }

  .coverage-map-section.animate-in {
    opacity: 1;
    transform: translateY(0);
  }

  .coverage-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .coverage-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .coverage-header h2 {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-color);
    margin-bottom: 1rem;
    letter-spacing: -0.02em;
  }

  .coverage-header p {
    font-size: 1.2rem;
    color: var(--text-light);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .coverage-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: stretch;
  }

  .map-container {
    position: relative;
    background: white;
    border-radius: 1.5rem;
    padding: 0;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    border: 1px solid #e8f2ff;
    height: 500px;
    overflow: hidden;
  }

  #leaflet-map {
    width: 100%;
    height: 100%;
    border-radius: 1.5rem;
    z-index: 1;
  }

  .map-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    margin-top: 60px;
    z-index: 1000;
    pointer-events: none;
  }

  .coverage-indicator {
    text-align: center;
  }

  .coverage-badge {
    background: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-size: 0.85rem;
    font-weight: 600;
    display: inline-block;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    pointer-events: auto;
  }

  .coverage-details {
    background: white;
    padding: 3rem;
    border-radius: 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    border: 1px solid #e8f2ff;
    height: 500px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .coverage-info {
    margin-bottom: 2rem;
  }

  .coverage-info h3 {
    font-size: 1.6rem;
    font-weight: 700;
    color: var(--text-color);
    margin-bottom: 1rem;
    letter-spacing: -0.01em;
  }

  .coverage-info p {
    font-size: 1.1rem;
    color: var(--text-light);
    line-height: 1.6;
  }

  .coverage-cta {
    text-align: center;
  }

  .cta-primary {
    background: var(--primary-color);
    color: white;
    padding: 1rem 2.5rem;
    border-radius: 3rem;
    font-weight: 600;
    font-size: 1.1rem;
    text-decoration: none;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    position: relative;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    z-index: 1;
    display: inline-flex;
    align-items: center;
  }
  
  .cta-primary:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    background: var(--primary-dark);
  }

  .pulse-animation {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }
    50% {
      transform: scale(1.03);
      box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
    }
    100% {
      transform: scale(1);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }
  }

  .cta-text {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  /* Custom Leaflet marker styles */
  .custom-marker {
    background: transparent !important;
    border: none !important;
  }

  /* Ensure Leaflet controls use the right z-index */
  .leaflet-control-zoom {
    border-radius: 8px !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15) !important;
  }

  .leaflet-control-zoom a {
    border-radius: 8px !important;
    font-weight: 600 !important;
  }

  /* Mobile/Desktop text toggles */
  .mobile-text {
    display: none;
  }

  /* Mobile Responsive Styles */
  @media (max-width: 768px) {
    /* Coverage Map Mobile Styles */
    .coverage-map-section {
      padding: 3rem 0;
    }

    .coverage-container {
      padding: 0 1rem;
    }

    .coverage-header h2 {
      font-size: 2rem;
    }

    .coverage-header p {
      font-size: 1.1rem;
    }

    .coverage-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .map-container {
      padding: 1rem;
      height: 350px;
    }

    .coverage-details {
      padding: 2rem;
      height: auto;
      min-height: 300px;
    }

    .cta-primary {
      width: 100%;
      text-align: center;
      justify-content: center;
    }
    
    .cta-text {
      align-items: center;
    }
  }

  @media (max-width: 480px) {
    .cta-primary {
      padding: 0.85rem 1.5rem;
      font-size: 1rem;
      justify-content: center;
      align-items: center;
    }
    
    .cta-text {
      align-items: center;
    }

    /* Mobile/Desktop text toggles */
    .mobile-text {
      display: inline;
      font-size: 1.1rem;
      font-weight: 700;
    }
    
    .desktop-text {
      display: none;
    }
  }
</style> 