---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import TableOfContents from '../../components/TableOfContents.astro';

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the blog post for the current page
const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Generate JSON-LD structured data for the article
const articleSchema: {
  "@context": string;
  "@type": string;
  headline: string;
  datePublished: string;
  author: {
    "@type": string;
    name: string;
  };
  publisher: {
    "@type": string;
    name: string;
    logo: {
      "@type": string;
      url: string;
    };
  };
  description: string;
  image: string | undefined;
  mainEntityOfPage: {
    "@type": string;
    "@id": string;
  };
  hasPart?: Array<{
    "@type": string;
    isAccessibleForFree: string;
    cssSelector: string;
    name: string;
  }>;
} = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": entry.data.title,
  "datePublished": entry.data.pubDate.toISOString(),
  "author": {
    "@type": "Person",
    "name": entry.data.author
  },
  "publisher": {
    "@type": "Organization",
    "name": "MD Homecare",
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/src/assets/logo.svg', Astro.url).toString()
    }
  },
  "description": entry.data.description,
  "image": entry.data.image,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  }
};

// Add table of contents to structured data if headings exist
if (headings && headings.length > 0) {
  // Filter only h2 and h3 for the TOC
  const tocHeadings = headings.filter(h => h.depth === 2 || h.depth === 3);
  
  if (tocHeadings.length > 0) {
    articleSchema.hasPart = tocHeadings.map(heading => ({
      "@type": "WebPageElement",
      "isAccessibleForFree": "True",
      "cssSelector": `#${heading.slug}`,
      "name": heading.text
    }));
  }
}

const structuredData = JSON.stringify(articleSchema);
---

<BaseLayout title={`${entry.data.title} | MD Homecare`} description={entry.data.description}>
  <!-- Add structured data for SEO -->
  <script type="application/ld+json" set:html={structuredData} />
  
  <div class="container blog-container">
    <article class="blog-post">
      <header class="post-header">
        <h1>{entry.data.title}</h1>
        
        <!-- E-E-A-T Enhancing Authority Section -->
        <div class="authority-indicators">
          <div class="verified-badge">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="verified-icon">
              <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
              <polyline points="22 4 12 14.01 9 11.01"></polyline>
            </svg>
            <span>Verified Article</span>
          </div>
          
          <div class="author-profile">
            <img src="/assets/avatar.webp" alt={`${entry.data.author} profile photo`} class="author-image" />
            <div class="author-info">
              <span class="author-name">{entry.data.author}</span>
              <span class="author-credentials">Healthcare Expert</span>
            </div>
          </div>
          
          <div class="article-meta">
            <div class="meta-item">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="meta-icon">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
              <span>8 min read</span>
            </div>
            <div class="meta-item">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="meta-icon">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              <span>Published: {entry.data.pubDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}</span>
            </div>
          </div>
        </div>
        <!-- End of E-E-A-T Enhancing Authority Section -->
        
        <div class="post-tags">
          {entry.data.tags.map((tag) => (
            <span class="tag">#{tag}</span>
          ))}
        </div>
      </header>
      
      {entry.data.image && (
        <div class="post-image">
          <img src={entry.data.image} alt={entry.data.title} />
        </div>
      )}
      
      <div class="post-content-wrapper">
        <div class="toc-sidebar">
          <TableOfContents headings={headings} />
        </div>
        <div class="post-content">
          <Content />
        </div>
      </div>
    </article>
  </div>
  
  <!-- Quick TOC navigation button for mobile -->
  <button class="toc-quick-nav" aria-label="Table of contents navigation" id="toc-quick-nav">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
      <line x1="3" y1="6" x2="21" y2="6"></line>
      <line x1="3" y1="12" x2="21" y2="12"></line>
      <line x1="3" y1="18" x2="21" y2="18"></line>
    </svg>
  </button>
</BaseLayout>

<script>
  // Service keywords to match and link - manually defined to avoid server/client mismatch
  interface ServiceKeyword {
    slug: string;
    keywords: string[];
  }

  const serviceKeywords: ServiceKeyword[] = [
    { slug: 'clinical-care', keywords: ['clinical care', 'nursing services', 'wound care', 'medication administration', 'catheter care', 'ostomy care', 'diabetic management', 'health assessments', 'vital signs monitoring', 'medical assessment', 'nursing', 'clinical', 'high-intensity personal activities'] },
    
    { slug: 'personal-care', keywords: ['personal care', 'bathing assistance', 'grooming', 'personal hygiene', 'showering', 'dressing', 'oral hygiene', 'toileting assistance', 'medication reminders', 'care', 'independence', 'quality of life'] },
    
    { slug: 'domestic-assistance', keywords: ['domestic assistance', 'household tasks', 'home help', 'cleaning services', 'meal preparation', 'laundry services', 'gardening', 'shopping', 'household chores', 'domestic', 'cleaning', 'household'] },
    
    { slug: 'respite-care', keywords: ['respite care', 'respite services', 'carer relief', 'short-term care', 'in-home respite', 'short term accommodation', 'STA', 'respite costs', 'carer support', 'respite'] },
    
    { slug: 'disability-services', keywords: ['disability support', 'disability services', 'NDIS support', 'daily living assistance', 'community participation', 'disability care', 'ndis funding', 'disability assistance', 'person-centered approach', 'disability', 'ndis', 'national disability insurance scheme', 'ndis provider', 'ndis business', 'participant', 'people with disability', 'participant-focused', 'participant plans'] },
    
    { slug: 'support-workers', keywords: ['support workers', 'care workers', 'disability support workers', 'ndis support worker', 'independent support worker', 'support staff', 'care staff', 'support coordination', 'workers', 'support', 'key personnel', 'staffing', 'hiring compliant staff'] },
    
    { slug: 'sil-services', keywords: ['supported independent living', 'SIL', 'supported accommodation', 'group homes', 'shared living support', 'disability accommodation', 'independent living', 'supported living'] },
    
    { slug: 'disability-home-support-services', keywords: ['disability home support', 'home modifications', 'housing support', 'in-home support', 'home-based care', 'disability home care', 'home support', 'assistive products'] },
    
    { slug: 'aged-care-home-modifications-maintenance', keywords: ['home modifications', 'aged care modifications', 'accessibility modifications', 'home maintenance', 'bathroom modifications', 'kitchen modifications', 'ramps', 'handrails', 'modifications', 'aged care', 'premises fit-out'] },
    
    { slug: 'therapy-services', keywords: ['therapy services', 'physiotherapy', 'occupational therapy', 'speech therapy', 'rehabilitation', 'behavioral therapy', 'psychology', 'exercise physiology', 'counselling', 'dietetics', 'social work', 'therapeutic supports', 'therapy', 'specialized expertise'] },
    
    { slug: 'transport-services', keywords: ['transport services', 'disability transport', 'assisted transport', 'medical transport', 'transportation assistance', 'ndis transport funding', 'mobility support', 'transport'] },
    
    { slug: 'specialist-disability-accommodation', keywords: ['specialist disability accommodation', 'SDA', 'disability housing', 'accessible housing', 'improved liveability', 'disability accommodation', 'ndis housing', 'accommodation'] },
    
    { slug: 'community-access-support', keywords: ['community access', 'social participation', 'community inclusion', 'community activities', 'social support', 'social skills', 'community engagement', 'recreational activities', 'community participation', 'community', 'social', 'community networking', 'community services', 'community connections'] },
    
    { slug: 'ndis-specialist-support-coordination', keywords: ['support coordination', 'NDIS coordination', 'disability coordination', 'ndis planning', 'plan management', 'specialist support', 'service coordination', 'coordination', 'local area coordinators', 'LACs', 'support coordinators', 'service agreements'] },
    
    { slug: 'ndis-behaviour-support-practitioner-training', keywords: ['behavior support', 'behaviour support', 'positive behavior support', 'behavior management', 'behavior practitioner', 'behavioral strategies', 'behavioral intervention', 'behaviour', 'safeguarding', 'NDIS Practice Standards', 'NDIS Code of Conduct'] }
  ];
  
  // Add service links after DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Find the blog post content element
    const contentElement = document.querySelector('.post-content');
    if (!contentElement) return;
    
    const linkedServices = new Set<string>();
    
    // Process each service
    serviceKeywords.forEach(service => {
      // Skip if already processed
      if (linkedServices.has(service.slug)) return;
      
      // Try each keyword until one matches
      for (const keyword of service.keywords) {
        // Skip if already linked
        if (linkedServices.has(service.slug) || 
            contentElement.innerHTML.includes(`href="/services/${service.slug}"`)) {
          break;
        }
        
        // Find text nodes containing the keyword
        const textNodes: Node[] = [];
        const walker = document.createTreeWalker(
          contentElement, 
          NodeFilter.SHOW_TEXT, 
          null
        );
        
        let node: Node | null;
        while (node = walker.nextNode()) {
          const nodeValue = node.nodeValue;
          const parentElement = node.parentElement;
          
          if (nodeValue && 
              parentElement && 
              nodeValue.toLowerCase().includes(keyword.toLowerCase()) && 
              parentElement.nodeName !== 'A') {
            textNodes.push(node);
          }
        }
        
        // Link the first occurrence
        if (textNodes.length > 0) {
          const firstNode = textNodes[0];
          const nodeText = firstNode.nodeValue;
          const parentNode = firstNode.parentNode;
          
          if (nodeText && parentNode) {
            const keywordRegex = new RegExp(`\\b${escapeRegExp(keyword)}\\b`, 'i');
            const match = nodeText.match(keywordRegex);
            
            if (match && match.index !== undefined) {
              const matchIndex = match.index;
              const beforeText = nodeText.substring(0, matchIndex);
              const matchedText = match[0];
              const afterText = nodeText.substring(matchIndex + matchedText.length);
              
              // Create new elements
              const beforeTextNode = document.createTextNode(beforeText);
              const linkElement = document.createElement('a');
              linkElement.href = `/services/${service.slug}`;
              linkElement.textContent = matchedText;
              linkElement.className = 'service-link';
              const afterTextNode = document.createTextNode(afterText);
              
              // Replace the original text node
              parentNode.insertBefore(beforeTextNode, firstNode);
              parentNode.insertBefore(linkElement, firstNode);
              parentNode.insertBefore(afterTextNode, firstNode);
              parentNode.removeChild(firstNode);
              
              // Mark this service as processed
              linkedServices.add(service.slug);
              break;
            }
          }
        }
      }
    });
  });
  
  // Helper function to escape special characters in regex patterns
  function escapeRegExp(string: string): string {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
</script>

<style>
  /* Style for service links */
  .service-link {
    color: var(--primary-dark, #3b82f6);
    text-decoration: underline;
    text-decoration-color: rgba(59, 130, 246, 0.4);
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
    transition: text-decoration-color 0.2s ease;
  }
  
  .service-link:hover {
    text-decoration-color: rgba(59, 130, 246, 1);
  }
</style>

<style is:global>
  /* Global table styles to ensure they apply to content rendered from markdown */
  .post-content table {
    display: block;
    width: 100%;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    -webkit-overflow-scrolling: touch;
  }
  
  /* Card-style tables for all viewport sizes */
  .post-content table.responsive-table {
    display: block;
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
  }
  
  /* Mobile styles for content elements */
  @media (max-width: 639px) {
    .post-content ul, 
    .post-content ol {
      padding-left: 2rem !important;
    }
    
    .post-content li {
      margin-bottom: 0.75rem !important;
    }
  }
  
  .post-content table.responsive-table thead {
    display: none;
  }
  
  .post-content table.responsive-table tbody {
    display: block;
    width: 100%;
  }
  
  .post-content table.responsive-table tr {
    display: block;
    margin-bottom: 1rem;
    border: 1px solid #ddd;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
  
  .post-content table.responsive-table td {
    display: flex;
    padding: 12px 16px;
    text-align: left;
    border: none;
    border-bottom: 1px solid #eee;
  }
  
  .post-content table.responsive-table td:last-child {
    border-bottom: none;
  }
  
  .post-content table.responsive-table td:before {
    content: attr(data-label);
    font-weight: 600;
    width: 30%;
    min-width: 120px;
    display: inline-block;
    margin-right: 16px;
  }
  
  /* Traditional table styles - no longer used but kept for reference */
  .post-content th,
  .post-content td {
    border: 1px solid #ddd;
    padding: 8px 12px;
    text-align: left;
  }

  .post-content th {
    background-color: #f2f2f2;
    font-weight: 600;
  }
</style>

<script>
  // Add data attributes to table cells for responsive display
  document.addEventListener('DOMContentLoaded', () => {
    const tables = document.querySelectorAll('.post-content table');
    
    tables.forEach(table => {
      // Add responsive-table class to all tables
      table.classList.add('responsive-table');
      
      // Get all headers
      const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);
      
      // For each row in tbody, add data-label to each cell
      const rows = table.querySelectorAll('tbody tr');
      rows.forEach(row => {
        const cells = row.querySelectorAll('td');
        cells.forEach((cell, index) => {
          if (headers[index]) {
            cell.setAttribute('data-label', headers[index]);
          }
        });
      });
    });
    
    // TOC Quick Navigation for mobile
    const tocQuickNav = document.getElementById('toc-quick-nav');
    const tocContainer = document.querySelector('.toc-container');
    
    if (tocQuickNav && tocContainer) {
      tocQuickNav.addEventListener('click', () => {
        // Create mobile TOC overlay
        let tocOverlay = document.getElementById('mobile-toc-overlay');
        
        if (!tocOverlay) {
          tocOverlay = document.createElement('div');
          tocOverlay.id = 'mobile-toc-overlay';
          tocOverlay.className = 'mobile-toc-overlay';
          
          // Create container div with proper scroll handling
          const overlayContainer = document.createElement('div');
          overlayContainer.className = 'mobile-toc-container';
          
          // Clone the TOC content
          const tocContent = tocContainer.cloneNode(true);
          overlayContainer.appendChild(tocContent);
          tocOverlay.appendChild(overlayContainer);
          
          // Add close button
          const closeBtn = document.createElement('button');
          closeBtn.className = 'mobile-toc-close';
          closeBtn.innerHTML = '×';
          closeBtn.setAttribute('aria-label', 'Close table of contents');
          overlayContainer.appendChild(closeBtn);
          
          document.body.appendChild(tocOverlay);
          
          // Prevent body scrolling
          document.body.style.overflow = 'hidden';
          
          // Handle close button click
          closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (tocOverlay && document.body.contains(tocOverlay)) {
              document.body.removeChild(tocOverlay);
            }
            document.body.style.overflow = '';
          });
          
          // Handle link clicks (close overlay after navigation)
          const tocLinks = tocOverlay.querySelectorAll('.toc-item a');
          tocLinks.forEach(link => {
            link.addEventListener('click', () => {
              if (tocOverlay && document.body.contains(tocOverlay)) {
                document.body.removeChild(tocOverlay);
              }
              document.body.style.overflow = '';
            });
          });
          
          // Handle click outside to close
          tocOverlay.addEventListener('click', (e) => {
            if (e.target === tocOverlay) {
              if (tocOverlay && document.body.contains(tocOverlay)) {
                document.body.removeChild(tocOverlay);
              }
              document.body.style.overflow = '';
            }
          });

          // Ensure links are fully tappable
          const allTocItems = tocOverlay.querySelectorAll('.toc-item');
          allTocItems.forEach(item => {
            const link = item.querySelector('a');
            if (link) {
              item.addEventListener('click', (e) => {
                // Only trigger if the item itself was clicked (not the link directly)
                if (e.target === item) {
                  link.click();
                }
              });
            }
          });
        } else {
          // Toggle visibility if already exists
          tocOverlay.style.display = tocOverlay.style.display === 'none' ? 'block' : 'none';
          document.body.style.overflow = tocOverlay.style.display === 'none' ? '' : 'hidden';
        }
      });
    }
    
    // Make TOC headers fully clickable
    const tocHeaders = document.querySelectorAll('.toc-header');
    tocHeaders.forEach(header => {
      header.addEventListener('click', (e) => {
        // Only trigger if clicking on the header itself or its direct children (except links)
        const target = e.target as HTMLElement;
        if (target && target.tagName !== 'A') {
          const tocToggle = header.querySelector('.toc-toggle');
          const tocNav = header.closest('.toc-container')?.querySelector('.toc-nav');
          
          if (tocToggle && tocNav) {
            // Manually trigger the toggle button click
            tocNav.classList.toggle('toc-open');
            tocToggle.classList.toggle('toc-toggle-open');
          }
        }
      });
    });
  });
</script>

<style>
  /* Authority Indicators Styles */
  .authority-indicators {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin: 1.5rem 0;
    padding: 1rem;
    background-color: #f9fafb;
    border-radius: 8px;
    border: 1px solid #eaedf0;
  }

  .verified-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #107840;
    font-weight: 500;
  }

  .verified-icon {
    width: 1.25rem;
    height: 1.25rem;
    stroke: #107840;
  }

  .author-profile {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .author-image {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #fff;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }

  .author-info {
    display: flex;
    flex-direction: column;
  }

  .author-name {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--text-color);
  }

  .author-credentials {
    font-size: 0.85rem;
    color: var(--light-text);
  }

  .article-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 0.5rem;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.35rem;
    font-size: 0.85rem;
    color: var(--light-text);
  }

  .meta-icon {
    width: 1rem;
    height: 1rem;
    stroke: #6b7280;
  }

  @media (min-width: 768px) {
    .authority-indicators {
      padding: 1.25rem;
      margin: 2rem 0 1.5rem;
    }

    .author-image {
      width: 80px;
      height: 80px;
    }

    .author-name {
      font-size: 1.2rem;
    }

    .author-credentials {
      font-size: 0.9rem;
    }
  }

  @media (min-width: 1024px) {
    .authority-indicators {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      gap: 1.5rem;
    }

    .verified-badge {
      order: 2;
    }

    .author-profile {
      order: 1;
      margin-right: auto;
    }

    .article-meta {
      order: 3;
      margin-top: 0;
    }
  }

  .blog-container {
    max-width: 100%;
    overflow-x: hidden;
    padding: 0 1rem;
  }

  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem 0;
    width: 100%;
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
  }
  
  .post-header {
    margin-bottom: 1.5rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 1rem;
    position: static;
    background: none;
    box-shadow: none;
    z-index: auto;
  }
  
  .post-header h1 {
    font-size: 1.8rem;
    line-height: 1.3;
    margin-bottom: 0.75rem;
  }
  
  .post-meta {
    margin: 0.75rem 0;
    color: var(--light-text);
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  
  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 0.75rem 0;
  }
  
  .tag {
    background-color: var(--light-background);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
  }
  
  .post-content-wrapper {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-top: 1.5rem;
  }
  
  .post-content {
    line-height: 1.6;
    font-size: 1rem;
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-word;
    max-width: 100%;
  }
  
  .post-content h2 {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-color);
    border-bottom: 1px solid #eee;
    padding-bottom: 0.5rem;
  }
  
  .post-content h3 {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .post-content h4 {
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-color);
  }
  
  .post-content p {
    margin-bottom: 1.25rem;
    font-size: 1rem;
  }
  
  .post-content ul, .post-content ol {
    margin-bottom: 1.25rem;
    padding-left: 1.25rem;
  }

  .post-content li {
    margin-bottom: 0.5rem;
  }
  
  .post-content pre {
    background-color: var(--light-background);
    padding: 0.75rem;
    border-radius: 4px;
    overflow-x: auto;
    margin-bottom: 1.25rem;
    max-width: 100%;
    white-space: pre-wrap;
    word-break: break-all;
  }
  
  .post-content code {
    font-family: monospace;
    font-size: 0.9rem;
    word-break: break-all;
    word-wrap: break-word;
  }

  .post-content table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-bottom: 0;
    font-size: 0.95rem;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
  }

  .post-content .table-wrapper {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    margin-bottom: 1.5rem;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
  
  .post-content th,
  .post-content td {
    padding: 0.75rem 1rem;
    text-align: left;
    border-bottom: 1px solid #e2e8f0;
  }

  .post-content th {
    background-color: #f8fafc;
    font-weight: 600;
    border-bottom: 2px solid #e2e8f0;
    position: sticky;
    top: 0;
  }

  .post-content tr:last-child td {
    border-bottom: none;
  }

  .post-content tr:hover {
    background-color: #f8fafc;
  }

  @media (max-width: 640px) {
    .post-content th,
    .post-content td {
      padding: 0.6rem 0.8rem;
      min-width: 120px;
    }
    
    .post-content ul, 
    .post-content ol {
      padding-left: 1.5rem;
    }
  }
  
  .post-image {
    margin: 0 0 1.5rem;
    border-radius: 6px;
    overflow: hidden;
    width: 100%;
  }
  
  .post-image img {
    width: 100%;
    max-height: 300px;
    object-fit: cover;
  }
  
  /* Mobile TOC styles */
  .toc-sidebar {
    margin-bottom: 1.5rem;
    overflow-y: auto;
    max-height: 80vh;
  }

  /* Quick navigate button for mobile */
  .toc-quick-nav {
    display: none;
    position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    z-index: 99;
    background-color: var(--primary-dark, #3b82f6);
    color: white;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    justify-content: center;
    align-items: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .toc-quick-nav:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .toc-quick-nav svg {
    width: 1.5rem;
    height: 1.5rem;
    stroke-width: 2;
  }

  @media (max-width: 1023px) {
    .toc-quick-nav {
      display: flex;
    }
  }

  /* Override the TOC container styles from TableOfContents.astro */
  .toc-sidebar .toc-container {
    background-color: #fcfcfc;
    border: 1px solid #f0f0f0;
    border-radius: 8px;
    margin: 0;
    box-shadow: 0 1px 2px rgba(0,0,0,0.04);
    position: relative;
    top: 0;
    max-height: none;
    overflow: visible;
  }

  .toc-sidebar .toc-header {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    user-select: none;
    transition: background-color 0.2s ease;
  }

  .toc-sidebar .toc-header:hover {
    background-color: rgba(0,0,0,0.03);
  }

  .toc-sidebar .toc-header h2 {
    font-size: 1rem;
    font-weight: 600;
    pointer-events: none;
    cursor: pointer;
  }

  .toc-sidebar .toc-toggle {
    cursor: pointer;
  }

  .toc-sidebar .toc-nav ol {
    padding: 0 1rem;
  }

  /* Make TOC items fully clickable */
  .toc-sidebar .toc-item {
    margin-bottom: 0.4rem;
    position: relative;
  }

  .toc-sidebar .toc-item a {
    border-left-width: 1px;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    display: block;
    width: 100%;
    padding: 0.5rem 0.75rem;
    margin-left: 0;
    border-radius: 4px;
  }

  .toc-sidebar .toc-item a:hover {
    background-color: rgba(0,0,0,0.03);
  }

  .toc-sidebar .toc-level-2 {
    border-bottom: 1px solid #f0f0f0;
  }

  .toc-sidebar .toc-level-2:last-child {
    border-bottom: none;
  }

  .toc-sidebar .toc-level-3 a {
    padding-left: 1.75rem;
  }

  /* Responsive adjustments */
  @media (min-width: 640px) {
    .blog-container {
      padding: 0 1.5rem;
    }
    
    .blog-post {
      padding: 1.5rem 0;
    }
    
    .post-header h1 {
      font-size: 2rem;
    }
    
    .post-content p {
      font-size: 1.05rem;
    }
    
    .post-image img {
      max-height: 400px;
    }
  }

  @media (min-width: 768px) {
    .blog-container {
      padding: 0 2rem;
    }
    
    .post-header {
      margin-bottom: 2rem;
      padding-bottom: 1.5rem;
    }
    
    .post-header h1 {
      font-size: 2.2rem;
    }
    
    .blog-post {
      padding: 2rem;
      max-width: 900px;
    }
    
    .post-content-wrapper {
      gap: 1.5rem;
    }
    
    .post-content {
      line-height: 1.7;
    }
  }
  
  @media (min-width: 1024px) {
    .blog-container {
      padding: 0;
    }
    
    .post-content-wrapper {
      grid-template-columns: 220px 1fr;
      gap: 2rem;
    }
    
    .toc-sidebar {
      position: sticky;
      top: 2rem;
      height: fit-content;
      background-color: transparent;
      padding: 0;
      margin-bottom: 0;
      border: none;
      box-shadow: none;
    }
    
    /* Enhanced desktop TOC styles */
    .toc-sidebar .toc-container {
      border-left: 2px solid #e9e9e9;
      padding-left: 0.5rem;
      margin-left: 0.5rem;
    }
    
    .toc-sidebar .toc-header {
      padding: 0 0 0.5rem 1rem;
      border-bottom: none;
    }
    
    .toc-sidebar .toc-header h2 {
      font-size: 0.95rem;
      color: #666;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .toc-sidebar .toc-nav {
      padding: 0;
    }
    
    .toc-sidebar .toc-nav ol {
      padding: 0 0 0 1rem;
    }
    
    .toc-sidebar .toc-item a {
      padding: 0.25rem 0.5rem;
      margin-left: -0.5rem;
      border-left: 2px solid transparent;
      border-radius: 0;
      font-size: 0.9rem;
    }
    
    .toc-sidebar .toc-item a:hover {
      background-color: transparent;
    }
    
    .toc-sidebar .toc-item a.active {
      border-left-color: var(--primary-dark, #3b82f6);
      color: var(--primary-dark, #3b82f6);
    }
    
    .toc-sidebar .toc-level-3 {
      padding-left: 0.75rem;
      font-size: 0.85rem;
    }
    
    .toc-sidebar .toc-level-3 a {
      padding-left: 0.5rem;
    }
    
    .blog-post {
      padding: 2rem 0;
      max-width: 1000px;
    }
    
    .post-header h1 {
      font-size: 2.5rem;
    }
    
    .post-content h2 {
      font-size: 1.75rem;
      margin-top: 3rem;
      margin-bottom: 1.5rem;
    }
    
    .post-content h3 {
      font-size: 1.4rem;
      margin-top: 2rem;
      margin-bottom: 1rem;
    }
    
    .post-content h4 {
      font-size: 1.2rem;
      margin-top: 1.5rem;
    }
    
    .post-content p {
      margin-bottom: 1.5rem;
    }
  }

  @media (min-width: 1280px) {
    .blog-post {
      max-width: 1100px;
    }
    
    .post-content-wrapper {
      grid-template-columns: 240px 1fr;
      gap: 3rem;
    }
  }

  @media (min-width: 1536px) {
    .blog-post {
      max-width: 1200px;
    }
  }

  .post-content img {
    max-width: 100%;
    height: auto;
  }

  .post-content .table-wrapper.scrollable::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 30px;
    background: linear-gradient(to right, rgba(255,255,255,0), rgba(0,0,0,0.05));
    pointer-events: none;
    border-top-right-radius: 6px;
    border-bottom-right-radius: 6px;
  }

  .post-content .table-wrapper {
    position: relative;
  }

  /* Mobile TOC overlay */
  .mobile-toc-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 100;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
  }
  
  .mobile-toc-container {
    background-color: white;
    border-radius: 12px;
    width: 100%;
    max-width: 400px;
    max-height: 85vh;
    position: relative;
    animation: fadeIn 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
  }
  
  .mobile-toc-overlay .toc-container {
    background-color: white;
    border-radius: 12px;
    width: 100%;
    overflow-y: auto;
    position: relative;
    border: none;
    -webkit-overflow-scrolling: touch;
    padding-bottom: 1rem;
    max-height: calc(85vh - 50px);
  }
  
  .mobile-toc-overlay .toc-nav {
    padding-top: 0.5rem;
    padding-bottom: 2.5rem;
  }
  
  .mobile-toc-overlay .toc-item a {
    padding: 0.75rem 1rem;
    border-radius: 0;
    margin: 0;
    display: block;
    width: 100%;
  }
  
  .mobile-toc-overlay .toc-level-2 {
    border-bottom: 1px solid #f0f0f0;
  }
  
  .mobile-toc-overlay .toc-level-2:last-child {
    border-bottom: none;
  }
  
  .mobile-toc-overlay .toc-level-3 a {
    padding-left: 1.75rem;
  }
  
  .mobile-toc-close {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    background-color: #f0f0f0;
    border: none;
    color: #333;
    font-size: 1.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    z-index: 101;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Mobile specific adjustments */
  @media (max-width: 639px) {
    .post-content ul, 
    .post-content ol {
      padding-left: 2rem;
    }
    
    .post-content li {
      margin-bottom: 0.75rem;
    }
  }

  /* Mobile TOC overlay styles */
  .mobile-toc-overlay .toc-header {
    cursor: pointer;
    user-select: none;
  }
  
  .mobile-toc-overlay .toc-header h2,
  .mobile-toc-overlay .toc-toggle {
    cursor: pointer;
  }
</style> 