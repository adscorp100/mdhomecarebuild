---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'url';

// Get the directory name for reading the suburbs data
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const dataPath = path.join(__dirname, '../../../data/australian-suburbs.json');
const suburbsData = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));

// Generate static paths for all service pages
export async function getStaticPaths() {
  const serviceEntries = await getCollection('services');
  return serviceEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the service for the current page
const { entry } = Astro.props;
const { Content } = await entry.render();

// Format suburb name for display (convert slug to title case)
const formatSuburbName = (slug) => {
  return slug
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Get related services in the same category
const allServices = await getCollection('services');
const relatedServices = allServices
  .filter(service => 
    service.data.category === entry.data.category && 
    service.slug !== entry.slug
  )
  .slice(0, 3); // Limit to 3 related services

// Group suburbs by state
const suburbsByState = {};
Object.entries(suburbsData).forEach(([slug, info]) => {
  if (!suburbsByState[info.state]) {
    suburbsByState[info.state] = [];
  }
  suburbsByState[info.state].push({ slug, name: formatSuburbName(slug), ...info });
});

// Sort suburbs alphabetically within each state
Object.keys(suburbsByState).forEach(state => {
  suburbsByState[state].sort((a, b) => a.name.localeCompare(b.name));
});

// Sort states
const sortedStates = Object.keys(suburbsByState).sort();

// Create a generic title and description with 'Your Area' instead of {suburb}
const genericTitle = entry.data.title.replace('{suburb}', 'Your Area');
const genericDescription = entry.data.description.replace('{suburb}', 'your area');
---

<BaseLayout 
  title={`${genericTitle} | MD Home Care`} 
  description={genericDescription}
>
  <div class="container">
    <article class="service-page">
      <header class="service-header">
        <div class="category-tag">{entry.data.category}</div>
        <h1>{genericTitle}</h1>
        <p class="service-description">{genericDescription}</p>
        {entry.data.keywords && entry.data.keywords.length > 0 && (
          <div class="keyword-tags">
            {entry.data.keywords.map((keyword) => (
              <span class="tag">#{keyword}</span>
            ))}
          </div>
        )}
      </header>
      
      <div class="service-content">
        {entry.data.image && (
          <div class="service-image">
            <img src={entry.data.image} alt={genericTitle} />
          </div>
        )}
        
        <div class="service-body">
          <!-- We'll replace {suburb} placeholders with "Your Area" in the client -->
          <div id="content-container">
            <Content />
          </div>
        </div>
      </div>
      
      <!-- Location selector -->
      <section class="locations-section">
        <h2>Find this service in your area</h2>
        <p>Select your location to see specific information about this service in your suburb.</p>
        
        <div class="location-search">
          <input type="text" id="suburb-search" placeholder="Search for your suburb..." />
        </div>
        
        <div class="states-container">
          {sortedStates.map(state => (
            <div class="state-section">
              <h3>{state}</h3>
              <div class="suburbs-grid">
                {suburbsByState[state].map(suburb => (
                  <a href={`/mdhomecarebuild/services/${entry.slug}/${suburb.slug}`} class="suburb-link">
                    {suburb.name} <span class="region-name">({suburb.region})</span>
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      </section>
      
      {relatedServices.length > 0 && (
        <aside class="related-services">
          <h2>Related Services</h2>
          <div class="related-grid">
            {relatedServices.map((service) => (
              <div class="related-card">
                <h3>{service.data.title.replace('{suburb}', 'Your Area')}</h3>
                <p>{service.data.description.replace('{suburb}', 'your area')}</p>
                <a href={`/mdhomecarebuild/services/${service.slug}`}>Learn More →</a>
              </div>
            ))}
          </div>
        </aside>
      )}
      
      <footer class="service-footer">
        <div class="cta-container">
          <h3>Want to know more about this service?</h3>
          <a href="/mdhomecarebuild/contact" class="contact-button">Contact Us</a>
        </div>
        
        <div class="navigation">
          <a href="/mdhomecarebuild/services" class="back-link">← Back to Services</a>
        </div>
      </footer>
    </article>
  </div>
</BaseLayout>

<script>
// Suburb search functionality
document.addEventListener('DOMContentLoaded', () => {
  // Replace all {suburb} with "Your Area" in the content
  const contentContainer = document.getElementById('content-container');
  if (contentContainer) {
    contentContainer.innerHTML = contentContainer.innerHTML.replace(/{suburb}/g, 'Your Area');
  }
  
  const searchInput = document.getElementById('suburb-search');
  
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const suburbLinks = document.querySelectorAll('.suburb-link');
      
      suburbLinks.forEach(link => {
        const suburb = link.textContent.toLowerCase();
        if (searchTerm === '' || suburb.includes(searchTerm)) {
          link.style.display = 'block';
        } else {
          link.style.display = 'none';
        }
      });
      
      // Show/hide state sections based on whether they have visible suburbs
      document.querySelectorAll('.state-section').forEach(section => {
        const visibleSuburbs = section.querySelectorAll('.suburb-link[style="display: block"]').length;
        if (visibleSuburbs === 0) {
          section.style.display = 'none';
        } else {
          section.style.display = 'block';
        }
      });
    });
  }
});
</script>

<style>
  .service-page {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 0;
  }
  
  .service-header {
    margin-bottom: 2rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 1.5rem;
  }
  
  .category-tag {
    display: inline-block;
    background-color: var(--light-background);
    padding: 0.3rem 0.8rem;
    border-radius: 1rem;
    font-size: 0.8rem;
    margin-bottom: 1rem;
  }
  
  .keyword-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
  }
  
  .tag {
    background-color: var(--light-background);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
  }
  
  .service-content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .service-image img {
    width: 100%;
    border-radius: 8px;
  }
  
  .service-body {
    line-height: 1.8;
  }
  
  .locations-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .location-search {
    margin: 1.5rem 0;
  }
  
  #suburb-search {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }
  
  .states-container {
    margin-top: 2rem;
  }
  
  .state-section {
    margin-bottom: 2rem;
  }
  
  .state-section h3 {
    border-bottom: 1px solid #eee;
    padding-bottom: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .suburbs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 0.75rem;
  }
  
  .suburb-link {
    display: block;
    padding: 0.5rem;
    border-radius: 4px;
    text-decoration: none;
    color: inherit;
    transition: background-color 0.2s;
  }
  
  .suburb-link:hover {
    background-color: #f5f5f5;
  }
  
  .region-name {
    font-size: 0.8rem;
    color: #666;
  }
  
  .related-services {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .related-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
    margin-top: 1.5rem;
  }
  
  .related-card {
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 1.5rem;
  }
  
  .service-footer {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .cta-container {
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .contact-button {
    display: inline-block;
    background-color: var(--primary-color, #0066cc);
    color: white;
    padding: 0.8rem 1.5rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 600;
    margin-top: 1rem;
  }
  
  .navigation {
    text-align: center;
  }
  
  .back-link {
    display: inline-block;
    font-weight: 600;
  }
  
  @media (min-width: 768px) {
    .service-content {
      grid-template-columns: 1fr 2fr;
    }
    
    .related-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
</style> 